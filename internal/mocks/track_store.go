// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/cerfical/muzik/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// TrackStore is an autogenerated mock type for the TrackStore type
type TrackStore struct {
	mock.Mock
}

type TrackStore_Expecter struct {
	mock *mock.Mock
}

func (_m *TrackStore) EXPECT() *TrackStore_Expecter {
	return &TrackStore_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *TrackStore) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrackStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type TrackStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *TrackStore_Expecter) Close() *TrackStore_Close_Call {
	return &TrackStore_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *TrackStore_Close_Call) Run(run func()) *TrackStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TrackStore_Close_Call) Return(_a0 error) *TrackStore_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TrackStore_Close_Call) RunAndReturn(run func() error) *TrackStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrack provides a mock function with given fields: _a0, _a1
func (_m *TrackStore) CreateTrack(_a0 context.Context, _a1 *model.TrackAttrs) (*model.Track, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrack")
	}

	var r0 *model.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TrackAttrs) (*model.Track, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.TrackAttrs) *model.Track); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.TrackAttrs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrackStore_CreateTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrack'
type TrackStore_CreateTrack_Call struct {
	*mock.Call
}

// CreateTrack is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *model.TrackAttrs
func (_e *TrackStore_Expecter) CreateTrack(_a0 interface{}, _a1 interface{}) *TrackStore_CreateTrack_Call {
	return &TrackStore_CreateTrack_Call{Call: _e.mock.On("CreateTrack", _a0, _a1)}
}

func (_c *TrackStore_CreateTrack_Call) Run(run func(_a0 context.Context, _a1 *model.TrackAttrs)) *TrackStore_CreateTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.TrackAttrs))
	})
	return _c
}

func (_c *TrackStore_CreateTrack_Call) Return(_a0 *model.Track, _a1 error) *TrackStore_CreateTrack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TrackStore_CreateTrack_Call) RunAndReturn(run func(context.Context, *model.TrackAttrs) (*model.Track, error)) *TrackStore_CreateTrack_Call {
	_c.Call.Return(run)
	return _c
}

// GetTrack provides a mock function with given fields: _a0, _a1
func (_m *TrackStore) GetTrack(_a0 context.Context, _a1 int) (*model.Track, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTrack")
	}

	var r0 *model.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Track, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Track); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrackStore_GetTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTrack'
type TrackStore_GetTrack_Call struct {
	*mock.Call
}

// GetTrack is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *TrackStore_Expecter) GetTrack(_a0 interface{}, _a1 interface{}) *TrackStore_GetTrack_Call {
	return &TrackStore_GetTrack_Call{Call: _e.mock.On("GetTrack", _a0, _a1)}
}

func (_c *TrackStore_GetTrack_Call) Run(run func(_a0 context.Context, _a1 int)) *TrackStore_GetTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TrackStore_GetTrack_Call) Return(_a0 *model.Track, _a1 error) *TrackStore_GetTrack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TrackStore_GetTrack_Call) RunAndReturn(run func(context.Context, int) (*model.Track, error)) *TrackStore_GetTrack_Call {
	_c.Call.Return(run)
	return _c
}

// GetTracks provides a mock function with given fields: _a0
func (_m *TrackStore) GetTracks(_a0 context.Context) ([]model.Track, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTracks")
	}

	var r0 []model.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Track, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Track); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrackStore_GetTracks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTracks'
type TrackStore_GetTracks_Call struct {
	*mock.Call
}

// GetTracks is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *TrackStore_Expecter) GetTracks(_a0 interface{}) *TrackStore_GetTracks_Call {
	return &TrackStore_GetTracks_Call{Call: _e.mock.On("GetTracks", _a0)}
}

func (_c *TrackStore_GetTracks_Call) Run(run func(_a0 context.Context)) *TrackStore_GetTracks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TrackStore_GetTracks_Call) Return(_a0 []model.Track, _a1 error) *TrackStore_GetTracks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TrackStore_GetTracks_Call) RunAndReturn(run func(context.Context) ([]model.Track, error)) *TrackStore_GetTracks_Call {
	_c.Call.Return(run)
	return _c
}

// NewTrackStore creates a new instance of TrackStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTrackStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *TrackStore {
	mock := &TrackStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
